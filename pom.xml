<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <!--    配置SpringBoot的父级项目-->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <!-- 2.4.5 的版本与nacos的注册Eureka不兼容导致报错-->
        <!-- 问题文档：https://blog.csdn.net/qq_34046046/article/details/109853508 -->
        <version>2.3.3.RELEASE</version>
        <relativePath/> <!-- lookup parent from repository -->
    </parent>

    <!-- 父模块GAV信息 -->
    <description>所有子模块的父模块-依赖传递管理</description>
    <name>learn-moon</name>
    <!-- 项目github ssh地址: -->
    <url>https://github.com/BillDavidup/learn-moon.git</url>

    <groupId>com.ning.learn.moon</groupId>
    <artifactId>learn-moon</artifactId>
    <version>1.0-SNAPSHOT</version>
    <!-- 父级项目的packaging类型必须是pom  -->
    <packaging>pom</packaging>

    <!-- 子模块声明 -->
    <modules>
        <!-- 通用模块 -->
        <module>learn-moon-common</module>
        <!-- mybatis 插件生产的dao接口类以及实体bean类模块 -->
        <module>learn-moon-dao</module>
        <!-- 业务逻辑服务模块 -->
        <module>learn-moon-service</module>
        <!-- 对外开放的API接口网关模块 -->
        <module>learn-moon-web</module>
    </modules>

    <!-- 属性统一配置 -->
    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
    </properties>

    <!-- 依赖管理：当前项目中引入依赖，如果子模块继承了该项目，也会在子模块中引入依赖 -->
    <dependencies>
        <!-- 第三方依赖 -->
        <!-- https://mvnrepository.com/artifact/org.projectlombok/lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.18.20</version>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <!-- 依赖管理器：DependencyManagement 只是声明依赖，并不实际引入，因此子项目需要显式声明需要用到的依赖
    如果在子项目中声明依赖，是不会从父项目中继承下来的，只有在子项目中写了该依赖项，并且没有执行具体版本，才会从父项目中继承该项，并且version和scope都读取自父pom
    如果子项目指定了版本号，那么会使用子项目中指定的jar版本
     -->
    <dependencyManagement>
        <dependencies>
            <!-- druid连接池 -->
            <!-- https://mvnrepository.com/artifact/com.alibaba/druid-spring-boot-starter -->
            <dependency>
                <groupId>com.alibaba</groupId>
                <artifactId>druid-spring-boot-starter</artifactId>
                <version>1.2.6</version>
            </dependency>
            <!-- mysql8 驱动-->
            <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>8.0.24</version>
            </dependency>
            <!-- mybatis -->
            <!-- https://mvnrepository.com/artifact/org.mybatis.spring.boot/mybatis-spring-boot-starter -->
            <dependency>
                <groupId>org.mybatis.spring.boot</groupId>
                <artifactId>mybatis-spring-boot-starter</artifactId>
                <version>2.1.4</version>
            </dependency>
            <!-- mybatis plus -->
            <!-- https://mvnrepository.com/artifact/com.baomidou/mybatis-plus-boot-starter -->
            <dependency>
                <groupId>com.baomidou</groupId>
                <artifactId>mybatis-plus-boot-starter</artifactId>
                <version>3.4.2</version>
            </dependency>
            <!-- 测试包 -->
            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.13.2</version>
                <scope>test</scope>
            </dependency>
            <!-- knife4j 接入STEP ①：引入Maven依赖 -->
            <!-- swagger-bootstrap-ui 升级的knife4j Controller接口文档 -->
            <!-- https://mvnrepository.com/artifact/com.github.xiaoymin/knife4j-spring-boot-starter -->
            <dependency>
                <groupId>com.github.xiaoymin</groupId>
                <artifactId>knife4j-spring-boot-starter</artifactId>
                <version>3.0.2</version>
            </dependency>
            <!-- 【配置中心】nacos -->
            <dependency>
            <groupId>com.alibaba.boot</groupId>
            <artifactId>nacos-config-spring-boot-starter</artifactId>
            <version>0.2.7</version>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!-- 插件管理器：子模块需要不带版本号的依赖声明才能使用 -->
        <pluginManagement>
            <plugins>
                <!-- 打包插件 -->
                <plugin>
                    <groupId>org.springframework.boot</groupId>
                    <artifactId>spring-boot-maven-plugin</artifactId>
                    <version>2.3.3.RELEASE</version>
                    <configuration>
                        <!-- 指定该Main Class为全局的唯一入口 -->
                        <mainClass>com.ning.learn.moon.LearnMoonWebApplication</mainClass>
                        <layout>ZIP</layout>
                    </configuration>
                    <executions>
                        <execution>
                            <goals>
                                <goal>repackage</goal><!--可以把依赖的包都打包到生成的Jar包中 -->
                            </goals>
                        </execution>
                    </executions>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>
</project>
